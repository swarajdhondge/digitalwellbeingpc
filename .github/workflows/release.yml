name: Build and Release MSIX

on:
  push:
    tags:
      - 'v*.*.*'

permissions:
  contents: write

env:
  SOLUTION: 'digital-wellbeing-app/digital-wellbeing-app.sln'
  INSTALLER_PROJECT: 'installer/installer.wapproj'
  CONFIGURATION: 'Release'
  PLATFORM: 'x86'
  PACKAGE_ROOT: 'installer/AppPackages'
  PACKAGE_NAME: 'DigitalWellbeingPC'

jobs:
  build-installer:
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup .NET 9.0
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '9.0.x'

      - name: Restore dependencies
        run: dotnet restore ${{ env.SOLUTION }}

      - name: Trust test certificate
        shell: powershell
        env:
          PFX_PASSWORD: ${{ secrets.TEST_CERT_PASSWORD }}
        run: |
          $pwd = ConvertTo-SecureString -String $env:PFX_PASSWORD -AsPlainText -Force
          Import-PfxCertificate `
            -FilePath installer/installer_TemporaryKey.pfx `
            -CertStoreLocation Cert:\CurrentUser\My `
            -Password $pwd

      - name: Publish MSIX package
        shell: powershell
        run: |
          & "${env:ProgramFiles(x86)}\Microsoft Visual Studio\2022\Community\MSBuild\Current\Bin\MSBuild.exe" `
            ${{ env.INSTALLER_PROJECT }} `
            /t:Publish `
            /p:Configuration=${{ env.CONFIGURATION }} `
            /p:Platform=${{ env.PLATFORM }}

      - name: Rename output folder and archive
        shell: powershell
        run: |
          $version = '${{ github.ref_name }}'.TrimStart('v')
          $packageName = '${{ env.PACKAGE_NAME }}'
          $source = Get-ChildItem '${{ env.PACKAGE_ROOT }}' -Directory |
                    Where-Object { $_.Name -like "$($packageName)*Test" }
          $destination = Join-Path '${{ env.PACKAGE_ROOT }}' "$packageName`_$version"
          Move-Item $source.FullName $destination
          $zipName = "$($packageName)_$version.zip"
          Compress-Archive -Path "$destination\*" -DestinationPath $zipName
          Write-Host "Created archive: $zipName"

      - name: Upload installer archive
        uses: actions/upload-artifact@v4
        with:
          name: msix-installer
          path: '*.zip'

  create-release:
    needs: build-installer
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Download installer archive
        uses: actions/download-artifact@v4
        with:
          name: msix-installer

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          files: '*.zip'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}